# bot.py
import os
import discord
from discord.ext import commands, tasks
from dotenv import load_dotenv
import requests
import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
API_USER = os.getenv('USERNAME2')
API_PASS = os.getenv('PASSWORD')
CHANNEL_ID = os.getenv('CHANNEL_ID')

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='/', intents=intents)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    schedule.start()


async def get_cve(url, ctx, cve_date):
    response = requests.get(url, auth=(API_USER, API_PASS))

    if response.status_code != 200:
        await ctx.send('Error fetching data')
        return

    data = response.json()
    found_entries = False
    for cve in data:
        if cve["created_at"][:10] == cve_date[:10] or cve["updated_at"][:10] == cve_date[:10]:
            # print ID and summary
            await ctx.send(f'**{cve["id"]}** - {cve["summary"]}')
            found_entries = True

    if not found_entries:
        await ctx.send('No entries found')


@bot.command()
async def cve(ctx, severity):
    valid_severity = ['low', 'medium', 'high', 'critical']
    today_date = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

    if severity not in valid_severity:
        await ctx.send('Invalid severity level')
        return
    url = f'https://www.opencve.io/api/cve?cvss={severity}'
    await get_cve(url, ctx, today_date)


async def daily_cve():
    channel = bot.get_channel(int(CHANNEL_ID))
    if channel:
        await channel.send('**Yesterdays Critical CVEs**')
        yesterday = datetime.datetime.utcnow() - datetime.timedelta(days=1)
        yesterday = yesterday.strftime("%Y-%m-%dT%H:%M:%SZ")
        url = f'https://www.opencve.io/api/cve?cvss=critical'
        await get_cve(url, channel, yesterday)


schedule = AsyncIOScheduler()
schedule.add_job(daily_cve, 'cron', hour=8)

# Run the bot
bot.run(TOKEN)
