# bot.py
import os
import discord
from discord.ext import commands, tasks
from dotenv import load_dotenv
import requests
import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
API_USER = os.getenv('USERNAME2')
API_PASS = os.getenv('PASSWORD')
CHANNEL_ID = os.getenv('CHANNEL_ID')
TIMEZONE = os.getenv('TIMEZONE')

intents = discord.Intents.all()
bot = commands.Bot(command_prefix='/cbot:', intents=intents)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    await bot.change_presence(activity=discord.Game(name="/cbot:help"))
    schedule.start()


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("Invalid command. Please use a valid command.")
    else:
        # Handle other types of errors here
        pass


async def get_cve(url, ctx, cve_date, emb):
    response = requests.get(url, auth=(API_USER, API_PASS))
    if response.status_code != 200:
        await ctx.send('Error fetching data')
        return

    data = response.json()
    found_entries = False
    for cve in data:
        if cve["created_at"][:10] == cve_date[:10] or cve["updated_at"][:10] == cve_date[:10]:
            # print ID and summary
            emb.add_field(name=f'**{cve["id"]}**', value=f'{cve["summary"]}', inline=False)
            # await ctx.send(f'**{cve["id"]}** - {cve["summary"]}')
            # await ctx.send("---\n\n")
            found_entries = True
    if found_entries:
        emb.set_footer(text=f'Data collected from https://www.opencve.io/api/')
        await ctx.send(embed=emb)
    else:
        await ctx.send('No entries found')


@bot.command()
async def cve(ctx, severity):
    valid_severity = ['low', 'medium', 'high', 'critical']
    today_date = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

    if severity not in valid_severity:
        await ctx.send('Invalid severity level')
        return
    url = f'https://www.opencve.io/api/cve?cvss={severity}'
    embed = discord.Embed(title=f'**Todays {severity} CVEs**', color=discord.Color.red())
    await get_cve(url, ctx, today_date, embed)


async def daily_cve():
    channel = bot.get_channel(int(CHANNEL_ID))
    if channel:
        await channel.send('**Yesterdays Critical CVEs**')
        yesterday = datetime.datetime.utcnow() - datetime.timedelta(days=1)
        yesterday = yesterday.strftime("%Y-%m-%dT%H:%M:%SZ")
        url = f'https://www.opencve.io/api/cve?cvss=critical'
        embed = discord.Embed(title=f'**Yesterdays Critical CVEs**', color=discord.Color.orange())
        await get_cve(url, channel, yesterday, embed)


class MyHelp(commands.HelpCommand):
    def get_command_signature(self, command):
        return '%s%s %s' % (self.context.clean_prefix, command.qualified_name, command.signature)

    async def send_bot_help(self, mapping):
        embed = discord.Embed(title=f'**CVE Bot Help**', color=discord.Color.blue())
        embed.add_field(name='**/cbot:cve <severity>**', value='List todays CVEs with severity level', inline=True)
        embed.set_footer(
            text='Application will also post yesterdays critical CVEs at 8am depending on the server timezone')

        channel = self.get_destination()
        await channel.send(embed=embed)


bot.help_command = MyHelp()

schedule = AsyncIOScheduler(timezone=TIMEZONE)
schedule.add_job(daily_cve, 'cron', hour=8)

# Run the bot
bot.run(TOKEN)
